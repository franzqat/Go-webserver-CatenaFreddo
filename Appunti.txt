DOMANDE E COMMENTI
Ci sono cose hardcoded: 
	path (al server) dove R salva jpg
	la temperatura critica in R 
	GO: path di esecuzione script per lanciare R
	Scala: url per la post
	Il tempo di ciclo del sensore

SCALA
Usiamo la gaussiana e dobbiamo cambiare la distribuzione usando un processo markoviano
Scala fa la post al server GO

eseguiamo il jar da linea di comando specificando l'id
Go esegue lo script di R da linea di comando specificando l'id



Optimal PATH:
Premesse: 
	Il server è attivo e in ascolto
	Il database MongoDB è attivo
	L'id dei sensori è univoco
	
1. Il sensore periodicamente invia il valore di temperatura [simulato], il timestamp e il proprio ID attraverso una chiamata POST al server GO
2. Il server riceve la POST e: 
	2.1. Inserisce i dati nel database MongoDB nella collezione corrispondente all'ID
	2.2. Crea, se non esistono, le cartelle e i files associati al sensore con quell'ID
	2.3. Esegue lo script di R associato all'ID
3. R elabora i dati e genera il jpg corrispondente e lo conserva nella cartella del server associata all'ID del sensore

Dal punto di vista dell'utente:
L'utente accede alla pagina localhost:8080 dove trova un elenco di links chiamate con l'ID del sensore.
I link portano ad una pagina contente l'immagine plottata.

	



DIPENDENZE

GO
https://github.com/mongodb/mongo-go-driver

R
https://jeroen.github.io/mongolite/
ggplot2
ggfortify
ggpmisc
Cairo




install.packages("mongolite")


install.packages("ggplot2")
install.packages("ggfortify")
library(ggpmisc)
_______________________________________________

ServerGO:
gira su localhost:8080
accetta get su /view/
/save/ post
_______________________________________________
TODO:
relazione in word
behaviour da riguardare in readme
pulizia e ordine librerie e files totali (accucchiare i repository)


Documentazione
polish

GO:


SCALA:

R:

Mongo

_______________________________________________

DONE:
Migliorare contenuto index frontpage
Verificare il numero di warning nell'index del sensore
Connettere mongo a go 
accoppaire post a query di mongo X
GO creazione pagine web per le immagini trovate e i rispettivi sensori X la creazione avviene durante la post
Aggiungere contatore di warning su mongo e modificare tutte le post di conseguenza

Root con link a tutti i sensori noti /frontpage
Fixato la post con il warning

R legge mongo
R salva immagine
R Disaccoppiare script
R Automatizzare running (sempre ad ogni post)


SCALA  - SENSORE CONCLUSO
tentativo di connessione
BONUS: jar di scala eseguibile
scala argomento con deviceid
Ottimizzare distribuzione con processo markoviano - come se fosse
Migliorare il file di configurazione
	path relativo
	piu informazioni 
	(creazione file di default)

Rendere il sensore più smart.
	Controllo dei valori e se sono costanti ridurre le post
Conta i warn -> è diventato un buffer circolare per archiviare i warning quando è offline e inviarli quando si ritorna online

MONGO
Migrato in locale
_______________________________________________

Compila GO
HOW TO RUN GO
cd webserver\mongo
go build
cd ..
cd .\server\ 
go install .\new-server.go
new-server
_________________
SCALA:
BUILD
BUILD ARTIFACT
BUILD
______________________________

R: Lancia script R-Handler

url <- "mongodb+srv://utente:unict@progettoapl-zkgjt.mongodb.net/test?retryWrites=true"
dmd <- mongo("45588774", url = url)


library(mongolite)
dmd <- mongo("45588774", url = "mongodb+srv://utente:unict@progettoapl-zkgjt.mongodb.net/test?retryWrites=true")
alldata <- dmd$find('{}')
print(alldata)

library(ggplot2)
ggplot(alldata,aes(x=timestamp, y=temperatura))  + geom_point(aes(x=timestamp, y=temperatura, color=cut)) + geom_smooth()


library(ggfortify)
autoplot(alldata) + labs(title="Temperatura") 
library(ggpmisc)

ggplot(alldata) +   geom_line(aes(x=timestamp,y=temperatura)) +   labs(title="Chart")
alldata <- dmd$find('{}')
_______________________________________________

 .\Rscript.exe --vanilla C:\Users\franz\go\src\webserver\R-Handler.R 100